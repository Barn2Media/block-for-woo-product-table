"use strict";

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function (wp, nonce, data) {
  "use strict";

  var __ = wp.i18n.__;
  var createElement = wp.element.createElement;
  var _wp$components = wp.components,
      Button = _wp$components.Button,
      SelectControl = _wp$components.SelectControl,
      TextControl = _wp$components.TextControl,
      TextareaControl = _wp$components.TextareaControl,
      PanelBody = _wp$components.PanelBody;
  var withState = wp.compose.withState;
  var el = createElement;

  if (!window.productTableBlockComponents) {
    window.productTableBlockComponents = {};
  }

  window.productTableBlockComponents.SettingsPanel = withState({
    modalOpened: false
  })(function (_ref) {
    var modalOpened = _ref.modalOpened,
        onChange = _ref.onChange,
        attributes = _ref.attributes,
        setState = _ref.setState;
    var tableSettingsModalRef = wp.element.createRef();
    var settings = {};

    var _iterator = _createForOfIteratorHelper(attributes.settings),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var setting = _step.value;
        settings[setting.key] = setting.value;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var changeSetting = function changeSetting(key, value) {
      settings[key] = value;
      var newSettings = [];

      for (var _key in settings) {
        newSettings.push({
          key: _key,
          value: settings[_key]
        });
      }

      onChange(newSettings);
    };

    return [el(PanelBody, {
      title: __('Add to Cart Column Settings', 'wpt-block')
    }, [el(SelectControl, {
      label: __('Add to Cart Button', 'wpt-block'),
      value: settings.cart_button,
      options: [{
        value: '',
        label: __('(Use global option)', 'wpt-block')
      }, {
        value: 'button',
        label: __('Button', 'wpt-block')
      }, {
        value: 'checkbox',
        label: __('Checkbox', 'wpt-block')
      }, {
        value: 'button_checkbox',
        label: __('Button and Checkbox', 'wpt-block')
      }],
      onChange: function onChange(value) {
        changeSetting('cart_button', value);
      },
      help: [__("How 'Add to Cart' buttons are displayed in the table. ", 'wpt-block'), el('a', {
        href: 'https://barn2.co.uk/kb/add-to-cart-buttons',
        target: '_blank'
      }, __('Read More', 'wpt-block'))]
    }), el(SelectControl, {
      label: __('Quantities', 'wpt-block'),
      value: settings.show_quantity,
      options: [{
        value: '',
        label: __('(Use global option)', 'wpt-block')
      }, {
        value: 'true',
        label: __('Show in add to cart column', 'wpt-block')
      }, {
        value: 'false',
        label: __('Do not show quantity selectors', 'wpt-block')
      }],
      onChange: function onChange(value) {
        changeSetting('show_quantity', value);
      }
    }), el(SelectControl, {
      label: __('Variations', 'wpt-block'),
      value: settings.variations,
      options: [{
        value: '',
        label: __('(Use global option)', 'wpt-block')
      }, {
        value: 'false',
        label: __('Link to product page', 'wpt-block')
      }, {
        value: 'dropdown',
        label: __('Dropdowns in add to cart column', 'wpt-block')
      }, {
        value: 'separate',
        label: __('Separate rows in table', 'wpt-block')
      }],
      onChange: function onChange(value) {
        changeSetting('variations', value);
      },
      help: [__('How to display options for variable products. ', 'wpt-block'), el('a', {
        href: 'https://barn2.co.uk/kb/product-variations',
        target: '_blank'
      }, __('Read More', 'wpt-block'))]
    })]), el(PanelBody, {
      title: __('Table Controls', 'wpt-block')
    }, [el(SelectControl, {
      label: __('Product Filters', 'wpt-block'),
      value: settings.filters,
      options: [{
        value: '',
        label: __('(Use global option)', 'wpt-block')
      }, {
        value: 'false',
        label: __('Disabled', 'wpt-block')
      }, {
        value: 'true',
        label: __('Show based on columns in table', 'wpt-block')
      }, {
        value: 'custom',
        label: __('Custom', 'wpt-block')
      }],
      onChange: function onChange(value) {
        if (value !== 'custom') {
          changeSetting('customFilters', '');
        }

        changeSetting('filters', value);
      },
      help: [__('Dropdown lists to filter the table by category, tag, attribute, or custom taxonomy. ', 'wpt-block'), el('a', {
        href: 'https://barn2.co.uk/kb/wpt-filters/#filter-dropdowns',
        target: '_blank'
      }, __('Read More', 'wpt-block'))]
    }), el('div', {
      className: 'barn2-wc-product-table-block__custom-filter-option',
      'aria-hidden': settings.filters && settings.filters === 'custom' ? 'false' : 'true'
    }, [el(TextControl, {
      label: __('Custom Product Filters', 'wpt-block'),
      value: settings.customFilters,
      onChange: function onChange(value) {
        changeSetting('customFilters', value);
      }
    })])]), el(PanelBody, {
      title: __('Additional Options', 'wpt-block'),
      initialOpen: false
    }, [el('p', {}, [__('You can configure additional options globally on the  ', 'wpt-block'), el('a', {
      href: '/wp-admin/admin.php?page=wc-settings&tab=products&section=product-table',
      target: '_blank'
    }, __('WooCommerce Product Table settings page', 'wpt-block')), __(', or by adding them below with one option per line (e.g. sort_by="name").', 'wpt-block'), el('a', {
      href: 'https://barn2.co.uk/kb/product-table-options/%5D%22',
      target: '_blank'
    }, __('See full list of options.', 'wpt-block'))]), el(TextareaControl, {
      label: __('Additional Shortcode Attributes', 'wpt-block'),
      value: settings.additional,
      onChange: function onChange(value) {
        changeSetting('additional', value);
      }
    })])];
  });
})(window.wp);