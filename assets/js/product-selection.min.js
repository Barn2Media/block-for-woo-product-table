"use strict";

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function (wp, nonce, data) {
  "use strict";

  var __ = wp.i18n.__;
  var createElement = wp.element.createElement;
  var _wp$components = wp.components,
      Button = _wp$components.Button,
      IconButton = _wp$components.IconButton,
      ToggleControl = _wp$components.ToggleControl;
  var withState = wp.compose.withState;
  var el = createElement;

  if (!window.productTableBlockComponents) {
    window.productTableBlockComponents = {};
  }

  var filterSelectionOptions = {
    'category': {
      label: 'Category',
      andor: true,
      for: 'category',
      multiple: true
    },
    'tag': {
      label: 'Tag',
      andor: true,
      for: 'tag',
      multiple: true
    },
    'cf': {
      label: 'Custom Field',
      andor: true,
      keypair: ['Key', 'Value'],
      multiple: true,
      for: 'value'
    },
    'term': {
      label: 'Custom Taxonomy Term',
      keypair: ['Taxonomy', 'Term'],
      multiple: true,
      for: 'value'
    },
    'attr': {
      attr: 'term',
      label: 'Attribute',
      keypair: ['Attribute', 'Term'],
      for: 'attr',
      multiple: true
    },
    'year': {
      label: 'Year',
      for: 'value'
    },
    'month': {
      label: 'Month',
      for: 'value'
    },
    'day': {
      label: 'Day',
      for: 'value'
    },
    'status': {
      label: 'Product Status',
      for: 'status',
      values: ['publish', 'draft', 'private', 'pending', 'future', 'any'],
      multiple: true
    },
    'include': {
      label: 'Include Products',
      description: 'Separate Product IDs with a comma',
      for: 'value'
    },
    'exclude': {
      label: 'Exclude Products',
      description: 'Separate Product IDs with a comma',
      for: 'value'
    },
    'exclude_category': {
      andor: true,
      label: 'Exclude Category',
      for: 'category',
      multiple: true
    },
    'user_products=true': {
      label: 'Previously Ordered Products'
    } //'variations=separate': { label: 'Show Variations' },

  };
  var deleteIcon = el('svg', {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 24 24"
  }, el('path', {
    d: "M12,2C6.486,2,2,6.486,2,12s4.486,10,10,10s10-4.486,10-10S17.514,2,12,2z M16.207,14.793l-1.414,1.414L12,13.414 l-2.793,2.793l-1.414-1.414L10.586,12L7.793,9.207l1.414-1.414L12,10.586l2.793-2.793l1.414,1.414L13.414,12L16.207,14.793z"
  }));

  var createProductSelectionFilters = function createProductSelectionFilters(_ref) {
    var filters = _ref.filters,
        onDelete = _ref.onDelete;
    var filterNodes = [];

    for (var i in filters) {
      var node = el('li', {
        'data-index': i,
        'data-key': filters[i].key,
        'data-value': filters[i].value,
        key: 'table-column-' + i
      }, [filters[i].key + '=' + filters[i].value, el(IconButton, {
        icon: deleteIcon,
        label: 'Remove Selection',
        'data-index': i,
        onClick: function onClick(e) {
          onDelete(e.currentTarget.dataset.index);
        }
      })]);
      filterNodes.push(node);
    }

    return filterNodes;
  };

  var getFilterSelectionOptions = function getFilterSelectionOptions() {
    var optionNodes = [];
    optionNodes.push(el('option', {
      value: ''
    }, __('(Select a product option)', 'wpt-block')));

    for (var key in filterSelectionOptions) {
      optionNodes.push(el('option', {
        value: key,
        'data-for': filterSelectionOptions[key].for,
        'data-key': filterSelectionOptions[key].attr || key,
        'data-multiple': filterSelectionOptions[key].multiple,
        'data-andor': filterSelectionOptions[key].andor,
        'data-description': filterSelectionOptions[key].description
      }, filterSelectionOptions[key].label));
    }

    return optionNodes;
  };

  var getFilterSelectionOptionValues = function getFilterSelectionOptionValues(values, recursive) {
    var optionNodes = [];
    optionNodes.push(el('option', {
      value: ''
    }, __('(Select a value)', 'wpt-block')));

    for (var key in values) {
      if (recursive && values[key].terms) {
        for (var subkey in values[key].terms) {
          optionNodes.push(el('option', {
            value: key + ':' + subkey,
            'data-key': key
          }, values[key].terms[subkey]));
        }
      } else {
        if (isNaN(key)) {
          optionNodes.push(el('option', {
            value: key
          }, values[key].label));
        } else {
          optionNodes.push(el('option', {
            value: values[key]
          }, values[key]));
        }
      }
    }

    return optionNodes;
  };

  var resetModal = function resetModal(modal) {
    modal.classList.remove('allow-multiple');
    modal.classList.remove('allow-andor');
    var disabled = modal.querySelectorAll('*[disabled]');

    var _iterator = _createForOfIteratorHelper(disabled),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var option = _step.value;
        option.disabled = false;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var selectors = modal.querySelectorAll('select,input');

    var _iterator2 = _createForOfIteratorHelper(selectors),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var obj = _step2.value;
        obj.value = '';
        obj.classList.remove('visible');
        obj.classList.remove('selected');
        obj.classList.remove('ready');
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    modal.querySelector('ul').innerHTML = '';
  };

  var selectProductOption = function selectProductOption(e, modal) {
    var self = e.currentTarget;
    var value = self.value;
    var thisOption = self.querySelector("option[value=\"".concat(value, "\"]"));
    modal.classList.remove('allow-multiple');
    modal.classList.remove('allow-andor');
    self.classList.remove('selected');
    var options = self.parentNode.querySelectorAll('.customize-filter-new-option');

    var _iterator3 = _createForOfIteratorHelper(options),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var option = _step3.value;
        option.classList.remove('visible');
        option.value = '';
        option.setAttribute('placeholder', '');
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    if (thisOption.dataset.for) {
      var selector = self.parentNode.querySelector('.customize-filter-new-option.' + thisOption.dataset.for);
      selector.classList.add('visible');

      if (thisOption.dataset.multiple) {
        modal.classList.add('allow-multiple');
      }

      if (thisOption.dataset.andor) {
        modal.classList.add('allow-andor');
      }

      if (thisOption.dataset.description) {
        selector.setAttribute('placeholder', thisOption.dataset.description);
      }
    } else {
      self.classList.add('selected');
    }
  };

  var selectProductKey = function selectProductKey(e) {
    var self = e.currentTarget;

    if (self.value === '') {
      self.classList.remove('selected');
    } else {
      self.classList.add('selected');
    }
  };

  var selectProductAttr = function selectProductAttr(e, modal) {
    var self = e.currentTarget;
    var attrValues = modal.querySelector('select.attr-values');

    if (self.value === '') {
      self.classList.remove('ready');
      attrValues.classList.remove('visible');
    } else {
      self.classList.add('ready');
      attrValues.classList.add('visible');
    }

    attrValues.value = '';
    var attrOptions = attrValues.querySelectorAll('option');

    var _iterator4 = _createForOfIteratorHelper(attrOptions),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var option = _step4.value;

        if (option.dataset.key === self.value) {
          option.style.display = '';
        } else {
          option.style.display = 'none';
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  };

  var selectProductAttrValue = function selectProductAttrValue(e) {
    var self = e.currentTarget;

    if (self.value === '') {
      self.classList.remove('selected');
    } else {
      self.classList.add('selected');
    }
  };

  var selectProductValue = function selectProductValue(e) {
    var self = e.currentTarget;

    if (self.value === '') {
      self.classList.remove('selected');
    } else {
      self.classList.add('selected');
    }
  };

  var addFilterSelection = function addFilterSelection(modal, saveNewFilter) {
    modal.querySelector('.customize-filter-add-new-selection').disabled = true;
    var key = modal.querySelector('.customize-filter-add-new-selection'),
        value = modal.querySelector('.customize-filter-new-option.selected');

    if (modal.classList.contains('allow-multiple')) {
      var list = modal.querySelector('ul'),
          item = document.createElement('li');
      item.innerHTML = value.value;
      item.dataset.value = value.value;
      list.append(item);
      key.disabled = true;
      value.value = '';
      value.classList.remove('selected');

      if (value.tagName === 'SELECT') {
        var option = value.querySelector("option[value=\"".concat(value.value, "\"]"));

        if (option) {
          option.disabled = true;
        }
      }
    } else {
      var split = key.value.split('=');
      var newFilterKey = split[0];
      var newFilterValue = split.length > 1 ? split[1] : '';

      if (split.length === 1) {
        newFilterValue = value.value;
      }

      saveNewFilter({
        key: newFilterKey,
        value: newFilterValue
      });
    }
  };

  var getNewFilter = function getNewFilter(modal, matchAll) {
    var key = modal.querySelector('.customize-filter-add-new-selection'),
        values = modal.querySelectorAll('ul li');
    var selectedOption = key.querySelector("option[value=\"".concat(key.value, "\"]"));
    var newFilterKey, newFilterValue;

    if (values.length) {
      newFilterKey = selectedOption.dataset.key;
      var joinChar = modal.classList.contains('allow-andor') && matchAll ? '+' : ',';
      var filters = [];

      var _iterator5 = _createForOfIteratorHelper(values),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var li = _step5.value;
          filters.push(li.dataset.value);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      newFilterValue = filters.join(joinChar);
    } else {
      var split = selectedOption.dataset.key.split('=');
      newFilterKey = split[0];
      newFilterValue = split.length > 1 ? split[1] : '';
    }

    return {
      key: newFilterKey,
      value: newFilterValue
    };
  };

  window.productTableBlockComponents.ProductSelection = withState({
    isMatchall: false,
    count: null
  })(function (_ref2) {
    var isMatchall = _ref2.isMatchall,
        count = _ref2.count,
        attributes = _ref2.attributes,
        saveFilters = _ref2.saveFilters,
        setState = _ref2.setState;
    wp.apiFetch.use(wp.apiFetch.createNonceMiddleware(nonce));
    wp.apiFetch({
      path: '/wc-product-table/v1/count',
      method: 'POST',
      data: {
        attrs: attributes
      }
    }).then(function (res) {
      if (count == null || res.count !== count) {
        setState({
          count: res.count
        });
      }
    });
    var filters = attributes.filters;

    var addFilter = function addFilter(filter) {
      var newFilters = JSON.parse(JSON.stringify(filters));
      newFilters.push(filter);
      saveFilters(newFilters);
    };

    var temporaryFilterSelectionsRef = wp.element.createRef();
    var newFilterPanelRef = wp.element.createRef();
    var productElements = [el('h3', {}, [__('Products', 'wpt-block'), el('em', {}, count != null ? "".concat(count, " products found") : 'Finding products...')]), el('ul', {
      className: 'barn2-wc-product-table-block__product-filters'
    }, createProductSelectionFilters({
      filters: filters,
      onDelete: function onDelete(index) {
        var newFilters = [];

        for (var i in filters) {
          if (i !== index) {
            newFilters.push(filters[i]);
          }
        }

        saveFilters(newFilters);
      }
    })), el('div', {
      className: 'barn2-wc-product-table-block__new-filter-panel',
      ref: newFilterPanelRef
    }, [el('ul', {
      className: 'barn2-wc-product-table-block__new-filter-selections',
      ref: temporaryFilterSelectionsRef
    }), el('p', {
      className: 'empty-options'
    }, __('(Using global options)', 'wpt-block')), el('select', {
      className: 'barn2-wc-product-table-block__add-new-selection',
      onChange: function onChange(e) {
        selectProductOption(e, newFilterPanelRef.current);
      }
    }, getFilterSelectionOptions()), el('select', {
      className: 'barn2-wc-product-table-block__new-option category',
      onChange: selectProductKey
    }, getFilterSelectionOptionValues(data.categoryTerms)), el('select', {
      className: 'barn2-wc-product-table-block__new-option status',
      onChange: selectProductKey
    }, getFilterSelectionOptionValues(filterSelectionOptions.status.values)), el('select', {
      className: 'barn2-wc-product-table-block__new-option tag',
      onChange: selectProductKey
    }, getFilterSelectionOptionValues(data.tagTerms)), el('select', {
      className: 'barn2-wc-product-table-block__new-option attr',
      onChange: function onChange(e) {
        selectProductAttr(e, newFilterPanelRef.current);
      }
    }, getFilterSelectionOptionValues(data.attributes)), el('select', {
      className: 'barn2-wc-product-table-block__new-option attr-values',
      onChange: selectProductAttrValue
    }, getFilterSelectionOptionValues(data.attributes, true)), el('input', {
      className: 'barn2-wc-product-table-block__new-option value',
      onChange: selectProductValue
    }), el(Button, {
      className: 'barn2-wc-product-table-block__add-filter-button',
      onClick: function onClick(e) {
        addFilterSelection(newFilterPanelRef.current, addFilter);
      }
    }, __('Add', 'wpt-block')), el(ToggleControl, {
      className: 'barn2-wc-product-table-block__andor-toggle',
      label: __('Match all', 'wpt-block'),
      checked: isMatchall,
      onChange: function onChange() {
        setState({
          isMatchall: !isMatchall
        });
      }
    }), el(Button, {
      className: 'barn2-wc-product-table-block__save-filter-button',
      onClick: function onClick(e) {
        var newFilter = getNewFilter(newFilterPanelRef.current, isMatchall);
        addFilter(newFilter);
      }
    }, __('Save', 'wpt-block'))])];
    return el('div', {
      className: 'barn2-wc-product-table-block__products'
    }, productElements);
    /*
    	[
    		,
    		
    		
    	]
    );
    */
  });
})(window.wp, wcptbNonce, wcptbCatalog);