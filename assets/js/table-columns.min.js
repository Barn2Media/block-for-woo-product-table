"use strict";

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function (wp, settings) {
  "use strict";

  var __ = wp.i18n.__;
  var createElement = wp.element.createElement;
  var _wp$components = wp.components,
      Button = _wp$components.Button,
      IconButton = _wp$components.IconButton;
  var withState = wp.compose.withState;
  var el = createElement;

  if (!window.productTableBlockComponents) {
    window.productTableBlockComponents = {};
  }

  var deleteIcon = el('svg', {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 24 24"
  }, el('path', {
    d: "M12,2C6.486,2,2,6.486,2,12s4.486,10,10,10s10-4.486,10-10S17.514,2,12,2z M16.207,14.793l-1.414,1.414L12,13.414 l-2.793,2.793l-1.414-1.414L10.586,12L7.793,9.207l1.414-1.414L12,10.586l2.793-2.793l1.414,1.414L13.414,12L16.207,14.793z"
  }));

  var getTableColumnLabel = function getTableColumnLabel(type) {
    if (settings.columnLabels[type]) {
      return settings.columnLabels[type].heading;
    } else {
      return type;
    }
  };

  var getTableColumnOrder = function getTableColumnOrder(container) {
    console.log(container);
    var newColumnOrder = [];
    var columnsSelected = container.querySelectorAll('li');
    console.log(columnsSelected);

    for (var i = 0; i < columnsSelected.length; i += 1) {
      newColumnOrder.push(columnsSelected[i].dataset.slug);
    }

    console.log(newColumnOrder);
    return newColumnOrder;
  };

  var getTableColumnOptions = function getTableColumnOptions() {
    var options = [el('option', {
      value: '',
      key: 0
    }, __('(Select a column to add)', 'wpt-block'))];

    for (var slug in settings.columnLabels) {
      options.push(el('option', {
        value: slug,
        key: slug
      }, settings.columnLabels[slug].heading));
    }

    return options;
  };

  var getTableColumnAttributeOptions = function getTableColumnAttributeOptions() {
    var options = [el('option', {
      value: '',
      key: 0
    }, __('(Select an attribute)', 'wpt-block'))];
    console.log(settings.columnLabels.att.values);

    for (var index in settings.columnLabels.att.values) {
      var attr = settings.columnLabels.att.values[index];
      options.push(el('option', {
        value: attr.attribute_name,
        key: attr.attribute_id
      }, attr.attribute_label));
    }

    return options;
  };

  var addTableColumn = function addTableColumn(_ref) {
    var selection = _ref.selection,
        attr = _ref.attr,
        custom = _ref.custom,
        columns = _ref.columns;

    if (selection.value === 'att') {
      columns.push(selection.value + ':' + attr.value);
    } else if (selection.value === 'tax' || selection.value === 'cf') {
      columns.push(selection.value + ':' + custom.value);
    } else {
      columns.push(selection.value);
    }

    attr.value = '';
    attr.classList.remove('selected');
    custom.value = '';
    custom.classList.remove('selected');
    selection.value = '';
    selection.classList.remove('selected');
    selection.classList.remove('select-attribute');
    selection.classList.remove('select-custom');
    return columns;
  };

  var selectTableColumn = function selectTableColumn(e) {
    e.currentTarget.classList.remove('selected');
    e.currentTarget.classList.remove('select-attribute');
    e.currentTarget.classList.remove('select-custom');

    if (e.currentTarget.value === 'att') {
      e.currentTarget.classList.add('select-attribute');
    } else if (e.currentTarget.value === 'cf' || e.currentTarget.value === 'tax') {
      e.currentTarget.classList.add('select-custom');
    } else {
      e.currentTarget.classList.add('selected');
    }
  };

  var selectTableColumnEntry = function selectTableColumnEntry(e) {
    if (e.currentTarget.value === '') {
      e.currentTarget.classList.remove('selected');
    } else {
      e.currentTarget.classList.add('selected');
    }
  };

  var removeArrayIndex = function removeArrayIndex(array, index) {
    var newArray = [];

    for (var i in array) {
      if (i !== index) {
        newArray.push(array[i]);
      }
    }

    return newArray;
  };

  var createTableColumns = function createTableColumns(_ref2) {
    var ref = _ref2.ref,
        columns = _ref2.columns,
        onChange = _ref2.onChange;
    var columnNodes = [];

    for (var i in columns) {
      var node = el('li', {
        'data-slug': columns[i],
        key: 'table-column-' + i
      }, [columns[i], el(IconButton, {
        icon: deleteIcon,
        label: 'Remove Column',
        'data-index': i,
        onClick: function onClick(e) {
          onChange(removeArrayIndex(columns, e.currentTarget.dataset.index));
        }
      })]);
      columnNodes.push(node);
    }

    return el('ul', {
      className: 'table-column-options',
      ref: ref,
      'data-columns': columns.join(',')
    }, columnNodes);
  };

  var createTableHeaderColumn = function createTableHeaderColumn(colSlug) {
    var colType;
    var colSplit = colSlug.indexOf(':');

    if (colSplit !== -1) {
      colType = colSlug.substring(0, colSplit);
    } else {
      colType = colSlug;
    }

    return el('span', {
      className: 'col-' + colType
    }, getTableColumnLabel(colType));
  };

  window.productTableBlockComponents.ProductTableColumns = withState({
    columnsHaveChanged: false,
    modalOpened: false,
    newColumns: null
  })(function (_ref3) {
    var columnsHaveChanged = _ref3.columnsHaveChanged,
        modalOpened = _ref3.modalOpened,
        newColumns = _ref3.newColumns,
        columns = _ref3.columns,
        onChange = _ref3.onChange,
        setState = _ref3.setState;
    var tableHeaderColumns = [],
        firstRun = false,
        sortable;
    var componentClassName = 'product-table-column-preview wc-product-table woocommerce dataTable';

    if (!newColumns) {
      newColumns = [];
      firstRun = true;
    }

    if (!columns || columns.length === 0) {
      componentClassName += ' default';

      var _iterator = _createForOfIteratorHelper(settings.defaultValues.columns),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var col = _step.value;
          tableHeaderColumns.push(createTableHeaderColumn(col));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var _iterator2 = _createForOfIteratorHelper(columns),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var col = _step2.value;
          tableHeaderColumns.push(createTableHeaderColumn(col));

          if (firstRun) {
            newColumns.push(col);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    var popupClassName = 'customize-column-modal';

    if (columnsHaveChanged) {
      popupClassName += ' changed';
    }

    if (modalOpened) {
      popupClassName += ' opened';
    }

    var columnRef = wp.element.createRef();
    var selectionRef = wp.element.createRef();
    var attrRef = wp.element.createRef();
    var customRef = wp.element.createRef();
    var columnPopup = el('div', {
      className: popupClassName
    }, [el('h3', {}, __('Modify Table Columns', 'wpt-block')), el(Button, {
      className: 'save-table-columns-button',
      onClick: function onClick(e) {
        if (onChange) {
          onChange(newColumns);
        }

        setState({
          columnsHaveChanged: false,
          modalOpened: false
        });
      }
    }, __('Save', 'wpt-block')), createTableColumns({
      ref: columnRef,
      columns: newColumns,
      onChange: function onChange(columns) {
        setState({
          columnsHaveChanged: true,
          newColumns: columns
        });
      }
    }), el('p', {
      className: 'empty-options'
    }, __('(Using global options)', 'wpt-block')), el('select', {
      className: 'new-table-column-selection',
      onChange: selectTableColumn,
      ref: selectionRef
    }, getTableColumnOptions()), el('select', {
      className: 'new-table-column-attribute-selection',
      onChange: selectTableColumnEntry,
      ref: attrRef
    }, getTableColumnAttributeOptions()), el('input', {
      className: 'new-table-column-custom-entry',
      onChange: selectTableColumnEntry,
      ref: customRef
    }), el(Button, {
      className: 'add-table-column-button',
      onClick: function onClick(e) {
        newColumns = getTableColumnOrder(columnRef.current);
        newColumns = addTableColumn({
          selection: selectionRef.current,
          attr: attrRef.current,
          custom: customRef.current,
          columns: newColumns
        });
        console.log(newColumns);
        setState({
          columnsHaveChanged: true,
          newColumns: newColumns
        });
      }
    }, __('Add', 'wpt-block'))]);
    tableHeaderColumns.push(el(Button, {
      className: 'customize-columns',
      'aria-expanded': modalOpened ? 'true' : 'false',
      onClick: function onClick(e) {
        setState({
          modalOpened: !modalOpened
        });
      }
    }, __('Customize Columns', 'wpt-block')));
    tableHeaderColumns.push(columnPopup);
    waitForReference(columnRef, function (ref) {
      if (!ref.classList.contains('ui-sortable')) {
        var $sortRef = jQuery(ref);
        $sortRef.sortable({
          update: function update(e, ui) {
            var newOrder = getTableColumnOrder(ref);
            $sortRef.sortable('cancel');
            setState({
              columnsHaveChanged: true,
              newColumns: newOrder
            });
          }
        });
      }
    });
    return el('div', {
      className: componentClassName
    }, tableHeaderColumns);
  });

  var waitForReference = function waitForReference(ref, ready) {
    if (ref.current) {
      ready(ref.current);
    } else {
      window.setTimeout(waitForReference, 100, ref, ready);
    }
  };
})(window.wp, wcptbSettings);